@model IEnumerable<HocaViewModel>
@inject SignInManager<ApplicationUser> SignInManager
@inject UserManager<ApplicationUser> UserManager

@foreach (var hoca in Model)
{
    <div class="col-md-6 mb-3">
        <div class="card shadow-lg">
            <div class="card-header bg-primary text-white d-flex justify-content-between align-items-center">
                <h5 class="mb-0">@hoca.HocaName</h5>
                @if (User.IsInRole(Rol.Role_Asistan))
                {
                    <span class="badge bg-light text-primary">Randevu Alınabilir</span>
                }
            </div>
            <div class="card-body">
                <ul class="list-group">
                    @foreach (var availability in hoca.Availabilities)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center
                            @(User.IsInRole(Rol.Role_Asistan) ? "availability-slot" : "")"
                            data-hoca-name="@hoca.HocaName"
                            data-availability-id="@availability.ID"
                            data-availability-date="@availability.Date"
                            data-availability-start="@availability.StartTime"
                            data-availability-end="@availability.EndTime">
                            <span>
                                <i class="bi bi-calendar"></i> @availability.Date
                            </span>
                            <span>
                                <i class="bi bi-clock"></i> @availability.StartTime - @availability.EndTime
                            </span>
                            @if (User.IsInRole(Rol.Role_Asistan))
                            {
                                <a href="@Url.Action("CreateAppointment", "Randevu", new { hocaName = hoca.HocaName, date = availability.Date, startTime = availability.StartTime, endTime = availability.EndTime })" class="btn btn-sm btn-outline-primary">
                                    Randevu Al
                                </a>
                            }
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const availabilitySlots = document.querySelectorAll('.availability-slot');
            const appointmentModal = new bootstrap.Modal(document.getElementById('appointmentModal'));

            availabilitySlots.forEach(slot => {
                slot.addEventListener('click', function () {
                    const hocaName = this.getAttribute('data-hoca-name');
                    const availabilityDate = this.getAttribute('data-availability-date');
                    const startTime = this.getAttribute('data-availability-start');
                    const endTime = this.getAttribute('data-availability-end');

                    document.getElementById('hocaNameInput').value = hocaName;
                    document.getElementById('availabilityDateInput').value = availabilityDate;
                    document.getElementById('availabilityStartInput').value = startTime;
                    document.getElementById('availabilityEndInput').value = endTime;

                    appointmentModal.show();
                });
            });

            const confirmButton = document.getElementById('confirmAppointmentBtn');
            if (confirmButton) {
                confirmButton.addEventListener('click', function () {
                    const reason = document.getElementById('appointmentReasonInput').value;

                    if (!reason) {
                        alert('Lütfen tüm alanları doldurun');
                        return;
                    }

                    document.getElementById('appointmentForm').submit();
                });
            }
        });
    </script>
}

